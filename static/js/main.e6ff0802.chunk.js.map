{"version":3,"sources":["components/SearchResult.tsx","components/SearchBox.tsx","components/MapBox.tsx","models/MapBoxToken.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchResult","resultStyle","color","this","props","result","map","obj","index","style","key","display_name","React","Component","SearchBox","searchStyle","background","onChangeSearch","event","setState","newSearch","target","value","onKeyPressSearch","getData","getMapQuestData","onClick","state","resultString","mapQuestResult","results","locations","onGetData","onGetMapQuestData","prevProps","prevState","className","onChange","onKeyPress","placeholder","inputProps","resultMapQuest","url","fetch","then","response","json","data","JSON","stringify","catch","error","console","mapboxgl","accessToken","MapBox","mapContainer","marker","getDataFromMapQuest","log","objectData","parseFloat","latLng","lng","lat","geoJsonData","features","getSource","addSource","addLayer","setData","getDataFromSearch","a","lon","points","flyTo","center","geometry","coordinates","essential","rotateCamera","timestamp","rotateTo","duration","requestAnimationFrame","zoom","Map","container","longitude","latitude","pitch","on","getCenter","toFixed","getZoom","ref","el","App","geoNames","newTask","id","name","tasks","textParam","deleteTask","taskToDelete","filter","todo","addTask","preventDefault","previousState","onChangeTask","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e6ff0802.chunk.js","sourcesContent":["import React from 'react';\r\nimport { searchModel } from \"./../models/SearchModel\";\r\n\r\n\r\ninterface Props {\r\n    result: Array<searchModel>;\r\n    resultMapQuest: any;\r\n}\r\n\r\nexport class SearchResult<SearchBox> extends React.Component<Props> {\r\n\r\n\r\n    componentDidUpdate() {\r\n        //console.log(\"zmiana2\")\r\n    }\r\n\r\n    resultStyle = {\r\n        color: \"black\"\r\n    } as React.CSSProperties;\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {this.props.result?.map((obj, index) => {\r\n                        return <li style={this.resultStyle} key={index}>{obj.display_name}</li>;\r\n                    })}\r\n                </ul>\r\n               {/*  MapQuest\r\n\r\n                <ul>\r\n                    {this.props.resultMapQuest.results[0].locations?.map((obj: any, index: any) => {\r\n                        return <li style={this.resultStyle} key={index}>{obj.adminArea5}</li>;\r\n                    })}\r\n                </ul> */}\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default SearchResult;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { SearchResult } from \"./SearchResult\";\r\nimport { searchModel } from \"./../models/SearchModel\";\r\nimport { MAPQUEST_ACCESS_TOKEN } from \"./../models/MapquestToken\";\r\nimport InputBase from '@material-ui/core/InputBase/InputBase';\r\n//import InputBase from '@material-ui/core/InputBase';\r\n\r\n\r\n\r\ninterface Props {\r\n    newSearch?: string;\r\n    resultString?: string;\r\n    result: Array<searchModel>;\r\n    onGetData: (res: any) => void;\r\n    onGetMapQuestData: (res: any) => void;\r\n    mapQuestResult: any\r\n}\r\ninterface State {\r\n    newSearch?: string;\r\n    resultString?: string;\r\n    result?: Array<searchModel>;\r\n    onGetData: (res: any) => void;\r\n    onGetMapQuestData: (res: any) => void;\r\n    mapQuestResult?: any;\r\n\r\n}\r\n\r\nexport class SearchBox<SearchBox> extends React.Component<State, Props> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            resultString: 'Pusto',\r\n            result: [],\r\n            mapQuestResult: { results: [{ locations: [] }] },\r\n            onGetData: () => { },\r\n            onGetMapQuestData: () => { }\r\n        };\r\n    }\r\n\r\n    searchStyle = {\r\n        background: 'white',\r\n    } as React.CSSProperties;\r\n\r\n\r\n    componentDidUpdate(prevProps: any, prevState: any) {\r\n        if (prevState.result !== this.state.result) {\r\n            this.props.onGetData(this.state.result);\r\n        }\r\n        if (prevState.mapQuestResult !== this.state.mapQuestResult) {\r\n            this.props.onGetMapQuestData(this.state.mapQuestResult);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.searchStyle}>\r\n                <div className='searchStyleIner'>\r\n                    <InputBase onChange={this.onChangeSearch} value={this.props.newSearch} onKeyPress={this.onKeyPressSearch}\r\n                        placeholder=\"Wyszukaj\"\r\n                        inputProps={{ 'aria-label': 'search' }}\r\n                    />\r\n                    <button onClick={this.onClick}>Dane</button>\r\n                    <SearchResult result={this.state.result} resultMapQuest={this.state.mapQuestResult}></SearchResult>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onChangeSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            newSearch: `${event.target.value}`\r\n        });\r\n    };\r\n\r\n    onKeyPressSearch = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            this.getData();\r\n            this.getMapQuestData()\r\n        }\r\n    };\r\n\r\n    onClick = () => {\r\n        this.getData();\r\n        this.getMapQuestData()\r\n    }\r\n\r\n    getData() {\r\n        const url = `https://nominatim.openstreetmap.org/?addressdetails=1&q=${this.state.newSearch}&format=json&limit=3`;\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({ resultString: JSON.stringify(data) });\r\n                this.setState({ result: data });\r\n\r\n            }\r\n            ).catch((error) => {\r\n                console.error('Error:', error);\r\n                this.setState({ resultString: JSON.stringify([]) });\r\n                this.setState({ result: [] });\r\n            });;\r\n    }\r\n\r\n    getMapQuestData() {\r\n       /*  const url = `http://open.mapquestapi.com/geocoding/v1/address?key=${MAPQUEST_ACCESS_TOKEN}&location=${this.state.newSearch}`;\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                this.setState({ mapQuestResult: data });\r\n\r\n            }\r\n            ).catch((error) => {\r\n                console.error('Error:', error);\r\n                this.setState({ mapQuestResult: [] });\r\n            });; */\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport { MAPBOX_ACCESS_TOKEN } from \"../models/MapBoxToken\";\r\nimport \"./Map.css\";\r\nimport { SearchBox } from \"./SearchBox\"\r\n\r\nmapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;\r\n\r\ntype Props = {\r\n    longitude: number;\r\n    latitude: number;\r\n};\r\n\r\ntype State = {\r\n    lng: number;\r\n    lat: number;\r\n    zoom: number,\r\n    data?: any\r\n    points: Array<Object>\r\n};\r\nclass MapBox extends React.Component<Props, State> {\r\n    private mapContainer: any;\r\n    private map: any;\r\n    private marker: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            lng: 5,\r\n            lat: 34,\r\n            zoom: 0,\r\n            points: []\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            center: [this.props.longitude, this.props.latitude],\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            zoom: 12,\r\n            pitch: 45\r\n        });\r\n\r\n        this.map.on('load', () => {\r\n\r\n            this.map.addSource('point', {\r\n                'type': 'geojson',\r\n                'data': {\r\n                    'type': 'FeatureCollection',\r\n                    'features': []\r\n                }\r\n            });\r\n            this.map.addLayer({\r\n                'id': 'points',\r\n                'source': 'point',\r\n                'type': 'circle',\r\n                'paint': {\r\n                    'circle-radius': 20,\r\n                    'circle-color': 'red'\r\n                }\r\n            });\r\n        }\r\n        );\r\n\r\n        this.map.on('move', () => {\r\n            this.setState({\r\n                lng: this.map.getCenter().lng.toFixed(4),\r\n                lat: this.map.getCenter().lat.toFixed(4),\r\n                zoom: this.map.getZoom().toFixed(2)\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    private getDataFromMapQuest = (event: any) => {\r\n        console.log(\"getDataFromMapQuest =>\", event)\r\n        let objectData: any = event.results[0].locations.map((obj: any) => {\r\n            return {\r\n                'type': 'Feature',\r\n                'geometry': {\r\n                    'type': 'Point',\r\n\r\n                    'coordinates': [parseFloat(obj.latLng.lng), parseFloat(obj.latLng.lat)]\r\n                }\r\n            }\r\n        })\r\n\r\n        let geoJsonData = {\r\n            'type': 'FeatureCollection',\r\n            'features': []\r\n        }\r\n        geoJsonData.features = objectData;\r\n\r\n        if (!this.map.getSource('mapQuestLayer')) {\r\n            this.map.addSource('mapQuestLayer', {\r\n                'type': 'geojson',\r\n                'data': {\r\n                    'type': 'FeatureCollection',\r\n                    'features': []\r\n                }\r\n            });\r\n            this.map.addLayer({\r\n                'id': 'mapQuestLayerId',\r\n                'source': 'mapQuestLayer',\r\n                'type': 'circle',\r\n                'paint': {\r\n                    'circle-radius': 10,\r\n                    'circle-color': 'blue'\r\n                }\r\n            });\r\n        }\r\n        this.map.getSource('mapQuestLayer').setData(geoJsonData);\r\n\r\n    }\r\n\r\n    private getDataFromSearch = async (event: any) => {\r\n        console.log(\"getDataFromSearch =>\", event)\r\n        let objectData: any = event.map((obj: any) => {\r\n            return {\r\n                'type': 'Feature',\r\n                'geometry': {\r\n                    'type': 'Point',\r\n                    'coordinates': [parseFloat(obj.lon), parseFloat(obj.lat)]\r\n                }\r\n            }\r\n        })\r\n        console.log(\"GEoJson\", objectData)\r\n        this.setState({ points: objectData })\r\n\r\n        let geoJsonData = {\r\n            'type': 'FeatureCollection',\r\n            'features': []\r\n        }\r\n        geoJsonData.features = objectData;\r\n\r\n        if (!this.map.getSource('point')) {\r\n            this.map.addSource('point', {\r\n                'type': 'geojson',\r\n                'data': {\r\n                    'type': 'FeatureCollection',\r\n                    'features': []\r\n                }\r\n            });\r\n            this.map.addLayer({\r\n                'id': 'points',\r\n                'source': 'point',\r\n                'type': 'circle',\r\n                'paint': {\r\n                    'circle-radius': 20,\r\n                    'circle-color': 'red'\r\n                }\r\n            });\r\n        }\r\n        this.map.getSource('point').setData(geoJsonData);\r\n        await this.map.flyTo({\r\n            center:\r\n                objectData[0].geometry.coordinates\r\n            ,\r\n            essential: true\r\n        });\r\n\r\n       //setTimeout(() => {\r\n        //   this.rotateCamera(0);\r\n        //}, 2000);\r\n\r\n\r\n    }\r\n\r\n    rotateCamera = (timestamp: number) => {\r\n        this.map.rotateTo((timestamp / 150) % 360, { duration: 0 });\r\n        requestAnimationFrame(this.rotateCamera);\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div>\r\n              {/*   <div className='sidebarStyle'>\r\n                    <div>Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\r\n                </div> */}\r\n                <div className='searchStyle'>\r\n                    <SearchBox onGetMapQuestData={this.getDataFromMapQuest} onGetData={this.getDataFromSearch}></SearchBox>\r\n                </div>\r\n\r\n                <div ref={el => this.mapContainer = el} className='mapContainer' />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MapBox;","export const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoidGxvbWllaiIsImEiOiJja2cyNm4wY2YwZ2ZkMnlvNWFjdTB3ZWV2In0.Bo-nyJTaJwxOpgDFwIH_9g'\r\n","import React from 'react';\nimport Todos from './components/Todos';\nimport { Task } from './models/Task';\nimport AddTodo from './components/AddTodo';\nimport { SearchBox } from \"./components/SearchBox\";\nimport Map from './components/Map';\nimport MapBox from './components/MapBox';\n\ninterface State {\n  tasks: Task[];\n  newTask: Task;\n  geoNames: string\n  newSearch: string;\n  onChangeSearch?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nclass App extends React.Component<{}, State>  {\n  state = {\n    newSearch: '',\n    geoNames: \"\",\n    newTask: {\n      id: 1,\n      name: \"\"\n    },\n    tasks: [{\n      name: \"test4\",\n      id: 12\n    },\n    {\n      name: \"test5\",\n      id: 15\n    },\n    {\n      name: \"test6\",\n      id: 16\n    },\n    {\n      name: \"test7\",\n      id: 17\n    }]\n  };\n\n\n\n  textParam: string = \"Administrator\"\n\n  private deleteTask = (taskToDelete: Task) => {\n\n    console.log(`App.tsx -> ${taskToDelete.id}`)\n    this.setState({ tasks: [...this.state.tasks.filter(todo => todo.id !== taskToDelete.id)] })\n  };\n\n\n  private addTask = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    console.log('Dodaj')\n    this.setState(previousState => ({\n      newTask: {\n        id: previousState.newTask.id + 1,\n        name: \"\"\n      },\n      tasks: [...previousState.tasks, previousState.newTask]\n    }));\n  };\n\n\n  private onChangeTask = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(event.target.value)\n    this.setState({\n      newTask: {\n        ...this.state.newTask,\n        name: event.target.value\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <MapBox longitude={17} latitude={52}>\n          </MapBox>\n\n          {/* <AddTodo task={this.state.newTask} onAdd={this.addTask} onChange={this.onChangeTask} />\n\n\n          <Todos login={this.textParam} tasks={this.state.tasks} onDelete={this.deleteTask} />\n */}\n\n\n          {/* <SearchBox></SearchBox> */}\n\n\n\n\n        </header>\n      </div>\n    );\n  }\n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}